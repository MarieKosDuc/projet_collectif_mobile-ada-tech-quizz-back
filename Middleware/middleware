package authentification

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	"golang.org/x/crypto/bcrypt"
)

type Data struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func LoginHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method Not Supported", http.StatusMethodNotAllowed)
		return
	}

	// Get username and password from the request body
	var data Data
	_ = json.NewDecoder(r.Body).Decode(&data)

	// hash paswword
	var hashPassword string
	hashPassword, _ = HashPassword(data.Password)

	// search for user infos in database
	var user User
	err := db.QueryRow("SELECT id, name, email, password FROM users WHERE email = $1", data.email).Scan(&user.ID, &user.Name, &user.Email, &user.Password)
	if err != nil {
		if err == sql.ErrNoRows {
			http.NotFound(w, r)
		} else {
			log.Fatal(err)
		}
		return
		// if user exists, check password
	} else {
		if hashPassword == user.Password {
			w.WriteHeader(http.StatusOK)
		} else {
			w.WriteHeader(http.StatusUnauthorized)
		}
	}
}
